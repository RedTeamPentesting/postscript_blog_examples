%!PS-Adobe-3.0 EPSF-3.0
%%Pages: 1
%%BoundingBox:   36   36  576  756
%%LanguageLevel: 1
%%EndComments
%%BeginProlog
%%EndProlog

%%%>>>Configurable variables<<<

% how many chars per line
/charactercount 100 def

%%%page setup

% white page
1 1 1 setrgbcolor clippath fill
% black text
0 0 0 setrgbcolor
/pagewidth currentpagedevice /PageSize get 0 get def
/pageheight currentpagedevice /PageSize get 1 get def

% calculate the character width
/characterWidth pagewidth charactercount div def

/Courier findfont setfont

/curWidth (-) stringwidth pop def

/Courier findfont characterWidth curWidth div scalefont setfont

/lineheight characterWidth curWidth div def

% initial x and y positions
/xposinit 10 def
/yposinit pageheight lineheight sub def

/xpos xposinit def
/ypos yposinit def
xpos ypos moveto



%%% base64 encoding code
/base64EncodingTable [
        (A) (B) (C) (D) (E) (F) (G) (H) (I) (J)
        (K) (L) (M) (N) (O) (P) (Q) (R) (S) (T)
        (U) (V) (W) (X) (Y) (Z) (a) (b) (c) (d)
        (e) (f) (g) (h) (i) (j) (k) (l) (m) (n)
        (o) (p) (q) (r) (s) (t) (u) (v) (w) (x)
        (y) (z) (0) (1) (2) (3) (4) (5) (6) (7)
        (8) (9) (+) (/) (=)
] def

/base64DecodingTable [
    80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 %/* 0 - 15 */
    80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 %/* 16 - 31 */
    80 80 80 80 80 80 80 80 80 80 80 62 80 80 80 63 %/* 32 - 47 */
    52 53 54 55 56 57 58 59 60 61 80 80 80 64 80 80 %/* 48 - 63 */
    80  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 %/* 64 - 79 */
    15 16 17 18 19 20 21 22 23 24 25 80 80 80 80 80 %/* 80 - 96 */
    80 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 %/* 87 - 111 */
    41 42 43 44 45 46 47 48 49 50 51 80 80 80 80 80 %/* 112 - 127 */
] def


% takes 1-3 bytes and returns their 4 base64 encoded values (including padding)
/threeBytesToFourChars {{
        /inputBytes exch def
        /b1 inputBytes 0 get def

        % first 6 of b1
        /c1 b1 2#11111100 and -2 bitshift def

        % padding for one char
        inputBytes length 1 eq {
                /c2 b1 2#00000011 and 4 bitshift def
                [c1 c2 64 64]
                exit
        } if

        /b2 inputBytes 1 get def

        % last 2 of b1, first 4 of b2
        /c2
                b1 2#00000011 and 4 bitshift  % last 2 of b1
                b2 2#11110000 and -4 bitshift % first 4 of b2
                xor
        def

        % padding for two chars
        inputBytes length 2 eq {
                /c3 b2 2#00001111 and 2 bitshift def
                [c1 c2 c3 64]
                exit
        } if

        /b3 inputBytes 2 get def

        % last 4 of b2, first 2 of b3
        /c3
                b2 2#00001111 and 2 bitshift  % last 4 of b2
                b3 2#11000000 and -6 bitshift % first 2 of b3
                xor
        def

        % last 6 of b3
        /c4 b3 2#00111111 and def
        [c1 c2 c3 c4]
        exit
}loop} def

% takes 4 base64-encoded chars and returns their 3 byte values
/FourCharsToThreeBytes {
        /inputChars exch def
	/c1 base64DecodingTable inputChars 0 get get def
	/c2 base64DecodingTable inputChars 1 get get def
	/c3 base64DecodingTable inputChars 2 get get def
	/c4 base64DecodingTable inputChars 3 get get def

	/b1 
		c1 2#00111111 and 2 bitshift
		c2 2#00110000 and -4 bitshift
		xor
	def

	/b2
		c2 2#00001111 and 4 bitshift
		c3 2#00111100 and -2 bitshift
		xor
	def

	/b3
		c3 2#00000011 and 6 bitshift
		c4 2#00111111 and
		xor
	def

	b1 b2 b3
} def

% (a) (b) -> (ab)
% https://stackoverflow.com/questions/12378904/postscript-concatenate-two-strings
/concat { exch dup length
        2 index length add string
        dup dup 4 2 roll copy length
        4 -1 roll putinterval
} bind def

/base64Encode {
        /inputString exch def
        /outputString () def
        0 3 inputString length 1 sub {
                /i exch def

                % if string is not divisible by three, only take the remaining interval
                inputString length i 3 add le {
                        /interval [inputString i inputString length i sub getinterval {} forall] def
                } {
                        /interval [inputString i 3 getinterval {} forall] def
                }ifelse
                /curChars interval threeBytesToFourChars def
                /curOut () def
                curChars {
                        /curChar exch def
                        /curOut curOut base64EncodingTable curChar get concat def
                } forall
                /outputString outputString curOut concat def
        } for
        outputString
} def

/base64Decode {
	/inputString exch def
	[
	0 4 inputString length 1 sub {
		/i exch def

		[inputString i 4 getinterval {} forall] FourCharsToThreeBytes
	} for
	]
} def

% https://github.com/sheepdoll/fpcb/blob/master/k2e.ps
/makestring { 
	%verbose 2 gt {(<) print =$} if
	dup length string       % new string of right size
	dup /NullEncode filter      % make a file out of string
	2 index                 % array to stack top
    { 2 copy write pop }         % integers to string
	forall
    flushfile exch pop                   % clean up
} bind def

%%%printing code
% function for changing lines and pages
/newline {
	/lineheight exch def

        % new page if we are at the bottom of the page
        ypos lineheight lt {
                showpage
                /xpos xposinit def
                /ypos yposinit def
                xpos ypos moveto
        } if

	% decrease y position
        ypos lineheight sub
        /ypos exch def

        % move cursor
        xpos ypos moveto
} def

% This base64 encodes the file and prints it on the page
% use pdftotext out.pdf - | base64 -d > file.out
% "base64 -d" could throw an error, as empty lines on the page get interpreted as newlines, but this can be ignored
/PrintFileBase64
{
	% buffer for reading (characters per line, is shorter as base64 inflates the characters and we have an offset of 10 from the left)
	/buff charactercount 0.7 mul cvi string def
        /infilename exch def
        % open file
        /infile infilename (r) file def
        /xpos xposinit def
        /ypos yposinit def
        xpos ypos moveto
        % loop
	{
                % read chars from file to the buffer
                infile buff readstring
                { % if chars remaining
                        % write the chars to the doc
                        buff base64Encode show
                        lineheight newline
                }{ % else
                        buff base64Encode show
                        % close file pointer
                        infile closefile
                        % exit the loop
                        exit
                } ifelse
        } bind loop
} def

% This fails if zero bytes are in the file, but is useful for simple text files
/PrintFileWithNewLines
{
	/buff charactercount string def
        /infilename exch def
        % open file
        /infile infilename (r) file def
        /xpos xposinit def
        /ypos yposinit def
        xpos ypos moveto
        % loop
	{
                % read chars from file to the buffer
                infile buff readline
                { % if chars remaining
                        % write the chars to the doc
                        buff cvs show
                        lineheight newline
                }{ % else
                        buff cvs show
                        % close file pointer
                        infile closefile
                        % exit the loop
                        exit
                } ifelse
        } bind loop
} def

% this does not print newlines, but can print files with zero bytes, e.g. /proc/self/cmdline
/PrintFileWithoutNewLines
{
	/buff charactercount string def
        /infilename exch def
        % open file
        /infile infilename (r) file def
        /xpos xposinit def
        /ypos yposinit def
        xpos ypos moveto
        % loop
	{
                % read chars from file to the buffer
                infile buff readstring
                { % if chars remaining
                        % write the chars to the doc
                        buff cvs show
                        lineheight newline
                }{ % else
                        buff cvs show
                        % close file pointer
                        infile closefile
                        % exit the loop
                        exit
                } ifelse
        } bind loop
} def

%%% actual code
{
	%(/proc/self/cmdline) PrintFileWithoutNewLines 
	%(/etc/passwd) PrintFileWithNewLines
	(/tmp/testdatei.odt) PrintFileBase64
} stopped {
	% if an error occurs, the cause is printed
	/errormessage {
		$error /errorname get 50 string cvs
	} def
	(printing file failed : ) show
	lineheight newline
	errormessage show
} { } ifelse % error catching frame

showpage
0 quit
